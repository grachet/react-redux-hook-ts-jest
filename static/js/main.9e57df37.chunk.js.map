{"version":3,"sources":["redux/hooks.ts","constantes/constantes.ts","constantes/config.ts","features/auth/authAPI.ts","features/auth/authSlice.ts","features/auth/LogoutUserAvatar.tsx","functions/helperFunctions.ts","app/components/MovieCard.tsx","features/movie/movieAPI.ts","features/movie/movieSlice.ts","features/movie/MovieList.tsx","app/components/SearchBar.tsx","app/pages/Home.tsx","features/auth/LoginButton.tsx","app/components/Copyright.tsx","app/pages/Login.tsx","App.tsx","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","APP_TITLE","API_URL_TMDB","PAGE_TITLES","ANONYMOUS_ACCOUNT","email","profilePictureURL","fullName","isAnonymous","CLIENT_ID_GOOGLE","TMDB_API_KEY","gapi","window","gapiLogin","a","onlyAlreadySigned","Promise","resolve","reject","load","auth2","init","client_id","scope","authInstance","getAuthInstance","isSignedIn","get","currentUser","Xd","signIn","console","error","gapiLogout","signOut","login","createAsyncThunk","response","it","Tt","kK","Se","logout","_","getState","auth","account","authSlice","createSlice","name","initialState","status","reducers","loginAnonymous","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","actions","selectAuth","LogoutUserAvatar","dispatch","Tooltip","title","IconButton","size","color","onClick","Avatar","alt","src","locationToMovieType","location","pathname","substring","StyledCard","styled","Card","theme","height","display","flexDirection","MovieCard","endUrl","movie","genre","id","overview","backdrop_path","vote_average","release_date","genre_ids","CardHeader","titleTypographyProps","variant","subheaderTypographyProps","subheader","Rating","sx","float","value","readOnly","CardMedia","component","backgroundColor","palette","common","black","image","process","Box","flexGrow","px","pt","Typography","fontSize","text","secondary","line","element","truncateText","pb","slice","map","join","getApiUrlTMDB","endpoint","page","getGenreIdMovies","fetch","rep","json","genres","getSearchMovies","query","movies","getNowPlayingMovies","getUpcomingMovies","getTopRatedMovies","getGenre","reduce","obj","item","search","results","toprated","topratedPage","nowplaying","nowplayingPage","upcoming","upcomingPage","movieSlice","selectMovie","dispatchGetMovie","movieType","MovieList","searchText","useParams","useLocation","useEffect","length","Object","keys","Container","mt","py","maxWidth","Grid","container","spacing","xs","textAlign","verticalAlign","sm","md","lg","Button","mr","Search","position","borderRadius","shape","alpha","white","marginLeft","marginRight","width","breakpoints","up","SearchIconWrapper","padding","pointerEvents","alignItems","justifyContent","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","SearchBar","history","useHistory","onKeyPress","e","key","push","target","placeholder","inputProps","Home","useState","openDrawer","setOpenDrawer","PageType","changeMovieType","MovieType","AppBar","Toolbar","noWrap","ml","LinearProgress","StyledDrawer","anchor","open","onClose","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","Drawer","flexShrink","boxSizing","GoogleButton","textTransform","grey","LoginButton","style","Copyright","align","Link","href","Date","getFullYear","RootBox","gutterBottom","paragraph","Stack","direction","p","minHeight","createTheme","mode","main","App","ThemeProvider","CssBaseline","path","to","store","configureStore","reducer","authReducer","movieReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9e57df37.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { AccountType } from \"../features/auth/authTypes\";\r\n\r\nexport const APP_TITLE = \"Movies\";\r\nexport const MY_NAME = \"Guillaume Rachet\";\r\nexport const LOGIN_TITLE = \"Find the movie you looking for and (not) much more.\";\r\n\r\nexport const REPOSITORY_URL = \"https://github.com/grachet/react-redux-hook-ts-jest\";\r\nexport const PORTFOLIO_URL = \"https://grachet.github.io/\";\r\n\r\nexport const API_URL_TMDB = \"https://api.themoviedb.org/3/\";\r\nexport const IMAGE_URL_TMDB: string = \"http://image.tmdb.org/t/p/w500/\";\r\n\r\nexport const URL_PLACEHOLDER = process.env.PUBLIC_URL + \"/assets/placeholder_background.png\";\r\n\r\nexport const PAGE_TITLES: { [key: string]: string } = {\r\n    \"search\": \"Search\",\r\n    \"toprated\": \"Top rated\",\r\n    \"nowplaying\": \"Now Playing\",\r\n    \"upcoming\": \"Up Comming\",\r\n}\r\n\r\nexport const ANONYMOUS_PROFILE_PICTURE_URL = \"https://assets.change.org/photos/3/pz/ur/IZPZUrJczRxOpDB-400x400-noPad.jpg?1528808989\";\r\nexport const ANONYMOUS_ACCOUNT: AccountType = {\r\n    email: \"Anonymous\",\r\n    profilePictureURL: ANONYMOUS_PROFILE_PICTURE_URL,\r\n    fullName: \"Anonymous\",\r\n    isAnonymous: true,\r\n}","export const CLIENT_ID_GOOGLE = \"630819923790-5hdg04l3dqmoj8bues9a7dnerf7trehs.apps.googleusercontent.com\";\r\nexport const TMDB_API_KEY = \"1dc2b196ec51b322a69db96aa1c90dc9\";","import { CLIENT_ID_GOOGLE } from \"../../constantes/config\";\r\nimport { ResponseLoginGapiType } from \"./authTypes\";\r\ndeclare global {\r\n    interface Window { gapi: any; }\r\n}\r\n\r\nconst { gapi } = window;\r\n\r\nexport const gapiLogin = async (onlyAlreadySigned: boolean = false): Promise<ResponseLoginGapiType | null> => {\r\n    try {\r\n        await new Promise((resolve, reject) => {\r\n            gapi.load('client:auth2', resolve);\r\n        });\r\n        await window.gapi.auth2.init({\r\n            client_id: CLIENT_ID_GOOGLE,\r\n            scope: \"https://www.googleapis.com/auth/youtube.readonly\",\r\n        });\r\n        const authInstance = gapi.auth2.getAuthInstance();\r\n        const isSignedIn = authInstance.isSignedIn.get();\r\n        if (isSignedIn) {\r\n            return authInstance.currentUser.Xd;\r\n        } else if (!onlyAlreadySigned) {\r\n            return await authInstance.signIn();\r\n        }\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n    }\r\n    return null\r\n};\r\n\r\nexport const gapiLogout = async (): Promise<boolean> => {\r\n    try {\r\n        const authInstance = gapi.auth2.getAuthInstance();\r\n        await authInstance.signOut();\r\n        return true;\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n        return false;\r\n    }\r\n};","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../redux/store';\r\nimport { ANONYMOUS_ACCOUNT } from \"../../constantes/constantes\";\r\nimport { gapiLogin, gapiLogout } from './authAPI';\r\nimport { AccountType, AuthState } from './authTypes';\r\n\r\nconst initialState: AuthState = {\r\n    account: null,\r\n    status: 'idle',\r\n};\r\n\r\nexport const login = createAsyncThunk(\r\n    'auth/login',\r\n    async (onlyAlreadySigned: boolean = false): Promise<AccountType | null> => {\r\n        const response = await gapiLogin(onlyAlreadySigned);\r\n        if (response) {\r\n            return {\r\n                email: response?.it.Tt,\r\n                profilePictureURL: response?.it.kK,\r\n                fullName: response?.it.Se,\r\n                isAnonymous: false\r\n            };\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n);\r\n\r\nexport const logout = createAsyncThunk(\r\n    'auth/logout',\r\n    async (_, { getState }): Promise<null> => {\r\n        const { auth } = getState() as { auth: AuthState };\r\n        if (!auth?.account?.isAnonymous) {\r\n            await gapiLogout();\r\n        }\r\n        return null;\r\n    }\r\n);\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        loginAnonymous: (state) => { state.account = ANONYMOUS_ACCOUNT },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(login.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.status = 'idle';\r\n                state.account = action.payload;\r\n            })\r\n            .addCase(logout.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.status = 'idle';\r\n                state.account = null;\r\n            });\r\n    },\r\n});\r\n\r\nexport const { loginAnonymous } = authSlice.actions;\r\n\r\nexport const selectAuth = (state: RootState) => state.auth.account;\r\n\r\nexport default authSlice.reducer;\r\n","import { IconButton } from '@mui/material';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport {\r\n    logout,\r\n    selectAuth\r\n} from './authSlice';\r\nimport { AccountType } from './authTypes';\r\n\r\nfunction LogoutUserAvatar() {\r\n\r\n    const account: AccountType | null = useAppSelector(selectAuth);\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <Tooltip title={\"Logout from \" + account?.email}>\r\n            <IconButton size=\"large\" color=\"inherit\" onClick={() => dispatch(logout())}>\r\n                <Avatar alt={account?.fullName} src={account?.profilePictureURL} />\r\n            </IconButton>\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default LogoutUserAvatar;","import { Location } from 'history';\r\nimport { IMAGE_URL_TMDB, URL_PLACEHOLDER } from '../constantes/constantes';\r\nimport { MovieKeyType } from '../features/movie/movieTypes';\r\n\r\nexport const locationToMovieType = (location: Location<unknown>): MovieKeyType => {\r\n    const name: string = location.pathname.substring(1);\r\n    if (name === \"upcoming\" || name === \"nowplaying\" || name === \"toprated\") {\r\n        return name;\r\n    } else {\r\n        return \"search\";\r\n    }\r\n}\r\n\r\nexport const getBackdropFullURL = (endUrl?: string): string => {\r\n    if (endUrl) {\r\n        return IMAGE_URL_TMDB + endUrl;\r\n    } else {\r\n        return URL_PLACEHOLDER;\r\n    }\r\n}","import { Box, CardHeader, Rating, Theme } from '@mui/material';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { styled } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport React from 'react';\r\nimport TextTruncate from 'react-text-truncate';\r\nimport { GenreType, MovieType } from '../../features/movie/movieTypes';\r\nimport { getBackdropFullURL } from '../../functions/helperFunctions';\r\n\r\ntype MovieCardProps = {\r\n    movie: MovieType,\r\n    genre: GenreType,\r\n}\r\n\r\nfunction MovieCard({ movie, genre }: MovieCardProps) {\r\n    const { id, title, overview, backdrop_path, vote_average, release_date, genre_ids }: MovieType = movie;\r\n    return (\r\n        <StyledCard >\r\n            <CardHeader\r\n                titleTypographyProps={{ variant: \"subtitle2\" }}\r\n                subheaderTypographyProps={{ variant: \"button\" }}\r\n                title={title}\r\n                subheader={<>\r\n                    {release_date}\r\n                    <Rating sx={{ float: \"right\" }} size=\"small\" name=\"read-only\" value={vote_average / 2} readOnly />\r\n                </>\r\n                }\r\n            />\r\n            <CardMedia\r\n                component=\"img\"\r\n                sx={{ backgroundColor: (theme: Theme) => theme.palette.common.black }}\r\n                image={getBackdropFullURL(backdrop_path)}\r\n                alt=\"random\"\r\n            />\r\n            <Box sx={{ flexGrow: 1, px: 1.5, pt: 1.5 }}>\r\n                <Typography\r\n                    sx={{ fontSize: 12, color: (theme: Theme) => theme.palette.text.secondary }}\r\n                >\r\n                    <TextTruncate\r\n                        line={3}\r\n                        element=\"span\"\r\n                        truncateText=\"…\"\r\n                        text={overview}\r\n                    />\r\n                </Typography>\r\n            </Box>\r\n            <Box sx={{ px: 1.5, pb: 0.5 }}>\r\n                <Typography key={id} variant=\"button\" color=\"primary\" sx={{ fontSize: 12 }} >\r\n                    {genre_ids.slice(0, 3).map((id: number) => genre[id]).join(\" / \")}\r\n                </Typography>\r\n            </Box>\r\n        </StyledCard>\r\n    );\r\n}\r\n\r\nconst StyledCard = styled(Card)(({ theme }) => ({\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n}));\r\n\r\nexport default MovieCard;","import { TMDB_API_KEY } from \"../../constantes/config\";\r\nimport { API_URL_TMDB } from \"../../constantes/constantes\";\r\nimport { GenreAPIType, MovieType } from \"./movieTypes\";\r\n\r\nexport const getApiUrlTMDB = (endpoint: string, page: number | string = 0): string => `${API_URL_TMDB + endpoint}?api_key=${TMDB_API_KEY}&page=${page}`;\r\n\r\nexport const getGenreIdMovies = async (): Promise<GenreAPIType[]> => {\r\n    try {\r\n        const rep = await fetch(`${API_URL_TMDB}genre/movie/list?api_key=${TMDB_API_KEY}`);\r\n        const json = await rep.json()\r\n        return json.genres;\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const getSearchMovies = async (query: string, page: number = 0): Promise<{ results: MovieType[] } | null> => {\r\n    try {\r\n        const rep = await fetch(`${API_URL_TMDB}search/movie?api_key=${TMDB_API_KEY}&query=${query}&page=${page}`);\r\n        const movies = await rep.json()\r\n        return movies\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getNowPlayingMovies = async (page: number = 0): Promise<{ results: MovieType[] } | null> => {\r\n    try {\r\n        const rep = await fetch(getApiUrlTMDB(\"movie/now_playing\", page));\r\n        const movies = await rep.json()\r\n        return movies\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getUpcomingMovies = async (page: number = 0): Promise<{ results: MovieType[] } | null> => {\r\n    try {\r\n        const rep = await fetch(getApiUrlTMDB(\"movie/upcoming\", page));\r\n        const movies = await rep.json()\r\n        return movies\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getTopRatedMovies = async (page: number = 0): Promise<{ results: MovieType[] } | null> => {\r\n    try {\r\n        const rep = await fetch(getApiUrlTMDB(\"movie/top_rated\", page));\r\n        const movies = await rep.json()\r\n        return movies\r\n    } catch (error: unknown) {\r\n        console.error(error)\r\n        return null;\r\n    }\r\n};\r\n\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../redux/store';\r\nimport { getNowPlayingMovies, getUpcomingMovies, getTopRatedMovies, getSearchMovies, getGenreIdMovies } from './movieAPI';\r\nimport { GenreAPIType, GenreType, MovieState, MovieType } from './movieTypes';\r\n\r\nconst initialState: MovieState = {\r\n    genre: {},\r\n    search: [],\r\n    nowplaying: [],\r\n    upcoming: [],\r\n    toprated: [],\r\n    nowplayingPage: 1,\r\n    upcomingPage: 1,\r\n    topratedPage: 1,\r\n    status: 'idle',\r\n};\r\n\r\nexport const getGenre = createAsyncThunk(\r\n    'movie/genre',\r\n    async (): Promise<GenreType> => {\r\n        const response = await getGenreIdMovies();\r\n        return response?.reduce((obj: { [key: string]: string }, item: GenreAPIType) => ({ ...obj, [item.id]: item.name }), {}) || {};\r\n    }\r\n);\r\n\r\nexport const search = createAsyncThunk(\r\n    'movie/search',\r\n    async (query: string = \"\"): Promise<MovieType[]> => {\r\n        const response = await getSearchMovies(query, 1);\r\n        return response?.results || [];\r\n    }\r\n);\r\n\r\n\r\nexport const toprated = createAsyncThunk(\r\n    'movie/toprated',\r\n    async (_, { getState }): Promise<MovieType[]> => {\r\n        const { movie } = getState() as { movie: MovieState };\r\n        const response = await getTopRatedMovies(movie.topratedPage);\r\n        return response?.results || [];\r\n    }\r\n);\r\n\r\nexport const nowplaying = createAsyncThunk(\r\n    'movie/nowplaying',\r\n    async (_, { getState }): Promise<MovieType[]> => {\r\n        const { movie } = getState() as { movie: MovieState };\r\n        const response = await getNowPlayingMovies(movie.nowplayingPage);\r\n        return response?.results || [];\r\n    }\r\n);\r\n\r\nexport const upcoming = createAsyncThunk(\r\n    'movie/upcoming',\r\n    async (_, { getState }): Promise<MovieType[]> => {\r\n        const { movie } = getState() as { movie: MovieState };\r\n        const response = await getUpcomingMovies(movie.upcomingPage);\r\n        return response?.results || [];\r\n    }\r\n);\r\n\r\n\r\nexport const movieSlice = createSlice({\r\n    name: 'Movie',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(getGenre.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(getGenre.fulfilled, (state, action) => {\r\n                state.status = 'idle';\r\n                state.genre = action.payload;\r\n            })\r\n            .addCase(search.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(search.fulfilled, (state, action) => {\r\n                state.status = 'idle';\r\n                state.search = action.payload;\r\n            })\r\n            .addCase(nowplaying.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(nowplaying.fulfilled, (state, action) => {\r\n                state.status = 'idle';\r\n                state.nowplaying = [...state.nowplaying, ...action.payload];\r\n                state.nowplayingPage++;\r\n            })\r\n            .addCase(upcoming.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(upcoming.fulfilled, (state, action) => {\r\n                state.status = 'idle';\r\n                state.upcoming = [...state.upcoming, ...action.payload];\r\n                state.upcomingPage++;\r\n            })\r\n            .addCase(toprated.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(toprated.fulfilled, (state, action) => {\r\n                state.status = 'idle';\r\n                state.toprated = [...state.toprated, ...action.payload];\r\n                state.topratedPage++;\r\n            })\r\n    },\r\n});\r\n\r\nexport const selectMovie = (state: RootState) => state.movie;\r\n\r\nexport default movieSlice.reducer;\r\n","import RefreshIcon from '@mui/icons-material/Refresh';\r\nimport SentimentVeryDissatisfiedIcon from '@mui/icons-material/SentimentVeryDissatisfied';\r\nimport { Button } from '@mui/material';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport { default as React, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router';\r\nimport { Dispatch } from 'redux';\r\nimport MovieCard from '../../app/components/MovieCard';\r\nimport { locationToMovieType } from '../../functions/helperFunctions';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { getGenre, nowplaying, search, selectMovie, toprated, upcoming } from './movieSlice';\r\nimport { MovieKeyType, MovieState, MovieType } from \"./movieTypes\";\r\n\r\nconst dispatchGetMovie = (dispatch: Dispatch<any>, movieType: string) => {\r\n    if (movieType === \"toprated\") {\r\n        dispatch(toprated())\r\n    } else if (movieType === \"nowplaying\") {\r\n        dispatch(nowplaying())\r\n    } else if (movieType === \"upcoming\") {\r\n        dispatch(upcoming())\r\n    }\r\n}\r\n\r\nfunction MovieList() {\r\n\r\n    const { searchText }: { searchText?: string } = useParams();\r\n    const location = useLocation();\r\n    const movieType: MovieKeyType = locationToMovieType(location);\r\n    const { [movieType]: movies, status, genre }: MovieState = useAppSelector(selectMovie);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!movies.length) {\r\n            dispatchGetMovie(dispatch, movieType)\r\n        }\r\n    }, [dispatch, movies, movieType])\r\n\r\n    useEffect(() => {\r\n        if (!!searchText) {\r\n            dispatch(search(searchText))\r\n        }\r\n    }, [dispatch, searchText])\r\n\r\n    useEffect(() => {\r\n        if (!Object.keys(genre).length) {\r\n            dispatch(getGenre())\r\n        }\r\n    }, [dispatch, genre])\r\n\r\n    return (\r\n        <Container sx={{ mt: 8, py: 4 }} maxWidth=\"xl\">\r\n            <Grid container spacing={4}>\r\n                {!!searchText && status !== \"loading\" && !movies.length && <Grid item xs={12}   >\r\n                    <Typography component=\"div\" variant=\"button\" color=\"primary\" sx={{ textAlign: \"center\" }} >\r\n                        Nothing found <SentimentVeryDissatisfiedIcon sx={{ verticalAlign: \"middle\" }} />\r\n                    </Typography>\r\n                </Grid>}\r\n                {movies.map((movie: MovieType) => (\r\n                    <Grid item key={movie?.id} xs={12} sm={6} md={4} lg={3}>\r\n                        <MovieCard movie={movie} genre={genre} />\r\n                    </Grid>\r\n                ))}\r\n                {!searchText && status !== \"loading\" && <Grid item xs={12} >\r\n\r\n                    <Button variant=\"outlined\"\r\n                        onClick={() => dispatchGetMovie(dispatch, movieType)}\r\n                    >\r\n                        <RefreshIcon sx={{ mr: 1 }} />\r\n                        More\r\n                    </Button>\r\n                </Grid>}\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default MovieList;","import SearchIcon from '@mui/icons-material/Search';\r\nimport InputBase from '@mui/material/InputBase';\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport React, { EventHandler, KeyboardEvent } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction SearchBar() {\r\n\r\n    const history = useHistory();\r\n\r\n    const searchPressEnter: EventHandler<KeyboardEvent<HTMLInputElement>> = (e) => {\r\n        if (e.key === 'Enter') {\r\n            history.push(\"/search/\" + (e.target as HTMLInputElement).value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Search>\r\n            <SearchIconWrapper>\r\n                <SearchIcon />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n                onKeyPress={searchPressEnter}\r\n                placeholder=\"Search ⏎\"\r\n                inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n        </Search>\r\n    );\r\n}\r\n\r\nconst Search = styled('div')(({ theme }) => ({\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    marginRight: theme.spacing(2),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n    },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: 'inherit',\r\n    '& .MuiInputBase-input': {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nexport default SearchBar;","import EventNoteIcon from '@mui/icons-material/EventNote';\r\nimport ExploreIcon from '@mui/icons-material/Explore';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport SlowMotionVideoIcon from '@mui/icons-material/SlowMotionVideo';\r\nimport TimerIcon from '@mui/icons-material/Timer';\r\nimport { IconButton, LinearProgress } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Divider from '@mui/material/Divider';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { styled } from '@mui/material/styles';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { APP_TITLE, PAGE_TITLES } from '../../constantes/constantes';\r\nimport LogoutUserAvatar from '../../features/auth/LogoutUserAvatar';\r\nimport MovieList from '../../features/movie/MovieList';\r\nimport { selectMovie } from '../../features/movie/movieSlice';\r\nimport { MovieKeyType } from '../../features/movie/movieTypes';\r\nimport { locationToMovieType } from '../../functions/helperFunctions';\r\nimport { useAppSelector } from '../../redux/hooks';\r\nimport SearchBar from '../components/SearchBar';\r\n\r\nexport default function Home() {\r\n\r\n    const [openDrawer, setOpenDrawer] = useState<boolean>(false)\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const { status } = useAppSelector(selectMovie);\r\n    const PageType: MovieKeyType = locationToMovieType(location);\r\n\r\n    const changeMovieType = (MovieType: string) => {\r\n        setOpenDrawer(false)\r\n        history.push(MovieType)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <IconButton size=\"large\" color=\"inherit\" sx={{ mr: 4 }} onClick={() => setOpenDrawer(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <SlowMotionVideoIcon color=\"primary\" sx={{ mr: 1 }} />\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}>\r\n                        {APP_TITLE}\r\n                        <Typography variant=\"button\" color=\"textSecondary\" component=\"span\" sx={{ ml: 2 }}>\r\n                            {PAGE_TITLES[PageType]}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <SearchBar />\r\n                    <LogoutUserAvatar />\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <main  >\r\n                <MovieList />\r\n            </main>\r\n            <StyledDrawer\r\n                anchor=\"left\"\r\n                open={openDrawer}\r\n                onClose={() => setOpenDrawer(false)}\r\n            >\r\n                <List>\r\n                    <ListItem button onClick={() => changeMovieType(\"/toprated\")}>\r\n                        <ListItemIcon>\r\n                            <ExploreIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Top rated\"} />\r\n                    </ListItem>\r\n                    <Divider />\r\n                    <ListItem button onClick={() => changeMovieType(\"/nowplaying\")}>\r\n                        <ListItemIcon>\r\n                            <TimerIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Now Playing\"} />\r\n                    </ListItem>\r\n                    <ListItem button onClick={() => changeMovieType(\"/upcoming\")} >\r\n                        <ListItemIcon>\r\n                            < EventNoteIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Up Comming\"} />\r\n                    </ListItem>\r\n                </List>\r\n            </StyledDrawer >\r\n        </>\r\n    );\r\n}\r\n\r\nconst StyledDrawer = styled(Drawer)(({ theme }) => ({\r\n    width: 300,\r\n    flexShrink: 0,\r\n    '& .MuiDrawer-paper': {\r\n        width: 300,\r\n        boxSizing: 'border-box',\r\n    },\r\n}));","import Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\nimport React, { useEffect } from 'react';\r\nimport { useAppDispatch } from '../../redux/hooks';\r\nimport BathtubIcon from '@mui/icons-material/Bathtub';\r\nimport {\r\n    login,\r\n    loginAnonymous\r\n} from './authSlice';\r\n\r\nconst GoogleButton = styled(Button)(({ theme }) => ({\r\n    textTransform: \"none\",\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.grey[600],\r\n    \"&:hover\": {\r\n        backgroundColor: theme.palette.grey[300],\r\n    }\r\n}));\r\n\r\nfunction LoginButton() {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(login(true))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <GoogleButton\r\n                variant=\"contained\"\r\n                onClick={() => dispatch(login())}\r\n            >\r\n                <img alt=\"Google logo\" src={process.env.PUBLIC_URL + \"/assets/google_logo.svg\"} style={{ marginRight: 10 }} />\r\n                Sign in with Google\r\n            </GoogleButton>\r\n            <Button variant=\"outlined\"\r\n                onClick={() => dispatch(loginAnonymous())}>\r\n                <BathtubIcon sx={{ mr: 1 }} /> Anonymous\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoginButton;","import Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport React from 'react';\r\nimport { MY_NAME, PORTFOLIO_URL } from '../../constantes/constantes';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href={PORTFOLIO_URL}>\r\n                {MY_NAME}\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default Copyright;","import SlowMotionVideoIcon from '@mui/icons-material/SlowMotionVideo';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Stack from '@mui/material/Stack';\r\nimport { styled } from '@mui/material/styles';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport React from 'react';\r\nimport { APP_TITLE, LOGIN_TITLE } from '../../constantes/constantes';\r\nimport LoginButton from '../../features/auth/LoginButton';\r\nimport Copyright from '../components/Copyright';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <RootBox>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <SlowMotionVideoIcon color=\"primary\" sx={{ mr: 1 }} />\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                        {APP_TITLE}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container component=\"main\" maxWidth=\"xl\" sx={{ flexGrow: 1 }}>\r\n                <Container maxWidth=\"sm\" sx={{ mt: 8 }}>\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h2\"\r\n                        align=\"center\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                    >\r\n                        {APP_TITLE}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"text.secondary\" paragraph>\r\n                        {LOGIN_TITLE}\r\n                    </Typography>\r\n                    <Stack\r\n                        sx={{ pt: 4 }}\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <LoginButton />\r\n                    </Stack>\r\n                </Container>\r\n            </Container >\r\n            <Box sx={{ p: 6 }} component=\"footer\">\r\n                <Copyright />\r\n            </Box>\r\n        </RootBox >\r\n    );\r\n}\r\n\r\nconst RootBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    minHeight: \"100vh\"\r\n}));","import { CssBaseline } from '@mui/material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport React from 'react';\nimport {\n  BrowserRouter as Router, Route, Switch, Redirect\n} from \"react-router-dom\";\nimport { useAppSelector } from './redux/hooks';\nimport Home from './app/pages/Home';\nimport Login from './app/pages/Login';\nimport { selectAuth } from './features/auth/authSlice';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#FF0000',\n    },\n    secondary: {\n      main: '#fff',\n    },\n  },\n});\n\nfunction App() {\n\n  const account = useAppSelector(selectAuth);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Switch>\n          <Route path=\"/login\">\n            {!!account && <Redirect to='/toprated' />}\n            <Login />\n          </Route>\n          <Route path=\"/search/:searchText\">\n            {!account && <Redirect to='/login' />}\n            <Home />\n          </Route>\n          <Route path=\"/toprated\">\n            {!account && <Redirect to='/login' />}\n            <Home />\n          </Route>\n          <Route path=\"/nowplaying\">\n            {!account && <Redirect to='/login' />}\n            <Home />\n          </Route>\n          <Route path=\"/upcoming\">\n            {!account && <Redirect to='/login' />}\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to='/toprated' />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authReducer from '../features/auth/authSlice';\nimport movieReducer from '../features/movie/movieSlice';\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    movie: movieReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}