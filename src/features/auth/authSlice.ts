import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { gapiLogin, gapiLogout } from './authAPI';

export interface AuthState {
    account: null | {
        email: string,
        profilePictureURL: string,
        fullName: string,
    };
    status: 'idle' | 'loading' | 'failed';
}

const initialState: AuthState = {
    account: null,
    status: 'idle',
};

export const login = createAsyncThunk(
    'auth/login',
    async (onlyAlreadySigned: boolean = false) => {
        const response = await gapiLogin(onlyAlreadySigned);
        console.log(response)
        return {
            email: response.it.Tt,
            profilePictureURL: response.it.kK,
            fullName: response.it.Se,
        };
    }
);

export const logout = createAsyncThunk(
    'auth/logout',
    async () => {
        await gapiLogout();
        return null;
    }
);

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(login.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(login.fulfilled, (state, action) => {
                state.status = 'idle';
                state.account = action.payload;
            })
            .addCase(logout.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(logout.fulfilled, (state) => {
                state.status = 'idle';
                state.account = null;
            });
    },
});

export const selectAuth = (state: RootState) => state.auth.account;

export default authSlice.reducer;
