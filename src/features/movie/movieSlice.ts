import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getNowPlayingMovies, getUpcomingMovies, getTopRatedMovies } from './movieAPI';

export type MovieKeyType = "home" | "explore" | "subscription";
export type MovieType = number;

export interface MovieState {
    home: MovieType[];
    subscription: MovieType[];
    explore: MovieType[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: MovieState = {
    home: [],
    subscription: [],
    explore: [],
    status: 'idle',
};

export const search = createAsyncThunk(
    'Movie/search',
    async () => {
        const response = await getNowPlayingMovies();
        console.log(response)
        return response.data;
    }
);

export const home = createAsyncThunk(
    'Movie/home',
    async () => {
        const response = await getNowPlayingMovies();
        console.log(response)
        return response.data;
    }
);

export const subscription = createAsyncThunk(
    'Movie/subscription',
    async () => {
        const response = await getTopRatedMovies();
        console.log(response)
        return response.data;
    }
);

export const explore = createAsyncThunk(
    'Movie/explore',
    async () => {
        const response = await getUpcomingMovies();
        console.log(response)
        return response.data;
    }
);

export const movieSlice = createSlice({
    name: 'Movie',
    initialState,
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(home.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(home.fulfilled, (state, action) => {
                state.status = 'idle';
                state.home = [...state.home, ...action.payload];
            })
            .addCase(subscription.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(subscription.fulfilled, (state, action) => {
                state.status = 'idle';
                state.subscription = [...state.subscription, ...action.payload];
            })
            .addCase(explore.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(explore.fulfilled, (state, action) => {
                state.status = 'idle';
                state.explore = [...state.explore, ...action.payload];
            })
    },
});

export const selectMovie = (state: RootState) => state.movie;

export default movieSlice.reducer;
